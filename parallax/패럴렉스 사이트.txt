<1. Basic>
1. 패럴렉스 사이트는 최근 포트폴리오 사이트의 근간이다.  포트폴리오 사이트 만들려면 패럴렉스 배워야 한다.

2. 기본 구조는 마우스 스크롤 내리면 각 영역별로 다르게 화면 변화가 나타나는 것이다.

3. background: radial-gradient 는 각 섹견의 배경색을 그라디언트로 주는데, 이건 최신 CSS3 라서 익스플로어
에서는 구동이 안될 수 도 있다.

4. 자바 스크립트에서 this는 자기자신을 표현하는 객체로, 몇번째 버튼을 클릭했는지 정보를 알고 싶을때 사용한다.

5. 제이쿼리 라이브러리(jquery.min.js) 뿐만 아니라, 제이쿼리 라이브러리-ui(jquery-ui.min.js)도 
스크립트에서 연동 시켜야 한다.  

6. nav와 section 연결시, a 태그를 이용하는데, 이렇게 사이트 끼리 연결 할때는 클래스를 인식하지 못한다.
반드시 아이디 값으로 줘야 한다. 섹션에 아이디 값을 줘야 a태그 인식이 된다.

7. 깃허브 주소:(각 단계별로 인덱스에 숫자만 더하면 된다.)
https://jsk8702.github.io/Web_Portfolio/parallax/index01.html 



<2. Menu>
1. vh 단위는 높이값의 100/1 이다. 만약 해당 태그의 전체 높이가 100px 이면 vh로는 1vh 이다. 보통
뷰포트의 너비값과 높이값에 맞춰서 사용할때 쓰인다. 반응형에 많이 쓰인다.

2. 기본 동작은 오프셋 값과 스크롤탭 값을 연동 시킨 다음, 메뉴 를 누르면 그 값이 같아 지면서 해당 위치로
이동하는 것이다.  오프셋 값과 스크롤 값이 같으면 화면에 보이고, 그 때 CSS 효과로 해당 메뉴 값이 달라지는
것이다.

3. jQuery 스크립트는 바디 안에 넣어야 동작 한다. 

4. easeInOutExpo 는 aniamte 메소드의 속성으로, 애니메이션 동작이 부드럽게 동작 하도록 한다.



<3. Responsive Menu>
1. 이번에는 메뉴가 2종류이다. 1개는 기존에 쓰던 PC용 메뉴(.menu) 와 모바일 화면에서 메뉴(.icon-wrap)
2종류가 있다. 구동 방법은 간단 하다. pc메뉴는 평소에 보이고, 모바일 메뉴는 안보인다.
해상도가 800px 로 작아 졌을때는 모바일 화면용 아이콘이 보이고, 이것을 클릭하면 메뉴가 나온다.
미디어 쿼리 사용한다.

2. viewport의 content 속성 중에 user-scalable=no 가 있으면, 모바일에서 화면 확대가 금지된다.
viewport는 모바일, 반응형 화면에서는 반드시 필요하다.

3. html 태그는 필요한 30개 정도만 알고 있으면 되지만, 제이쿼리는 다다익선이다. 그리고
제이쿼리는 css와 html을 알고 있어야 사용 가능하다. 그래서 개발자는 제이쿼리를 사용하지
않는 편이고, 퍼블리셔가 중간에서 이걸 해줘야 하는 것이다.

4. 여기서 문제가 있는데, 설정을 화면너비가 800픽셀에서 모바일 메뉴가 나오고, 본래 화면 너비에서는
원래 메뉴가 나와야 하는데 원래 메뉴가 나오지 않는 문제가 발생한다. 그 이유는 미디어쿼리로 800픽셀
에서 기존 메뉴를 안보이는 효과를 줬는데, 그것이 계속 스타일 속성으로 살아 있어서 그렇다. 미디어 쿼리
로 준 스타일은 기존에 css 보다 우선하기에 미디어 쿼리 효과가 덮어 씌어져 있다고 보면 된다.
이건 제이쿼리로 제거해 줘야 한다. 윈도우 화면 상대로 resize 함수를 사용해서 현재 화면을
변수에 저장하고 해당 변수를 800에 if문으로 비교해서 800보다 크다면 removeAttr 메서드를
이용해서 미디어 쿼리로 덮어 씌운 속성을 제거해 주면 된다.

5. is는 검색조건 메서드이다.
예) if(wWidth > 800 && $(".menu").is(":hidden"))
-> 만약 변수 wWidth 가 800보다 작고, 그리고 클래스 menu가 숨겨져 있다면
(display:none; 도 여기에 포함된다.).. 라는 의미가 된다.



<4. Side menu>
1. 사이드 메뉴는 여기서 생략된 transition 효과로 적용 가능하다. 그러나 트랜지션 기능은
IE 10 부터 인식된다. 따라서 호환성을 위해서 제이쿼리로 작업한다.

2. hasClass 메서드는 해당 클래스를 가지고 있는지 비교하는 것이다.

3. text 메서드는 대상의 텍스트를 삽입 할 때 사용한다.(기조에 텍스트가 있으면 수정도 가능)

4. animate 메서드의 easeInBounce 속성은 대상이 이동하거나 움직일때 한번 화면이 떨리는 효과를 준다.




<5. Sticky menu>
1. 고정메뉴다. 메뉴가 각 섹션 하단에 있다. 화면이 아래로 내려가면, 메뉴가 그대로 있다가 다음 섹션
으로 넘어 가면 그 때부터는 화면 상단에 붙어서 고정되는 형태다. 따라서 각 섹션 bottom에 메뉴가 
브라우저 top에 닿으면 고정되도록 해야 한다.

2. each 메서드는 대상자 모두에게 함수를 제공하게 된다.
예)
$("#nav").each(function(){
-> 아이디 nav 안에 속한 모든 h1, li에 해당 함수가 일괄 적용된다.




 <6. Hidden menu>
1. 스크립트를 만들 때는 먼저 어떤 원리로 동작 할 지 생각하고 만들어야 한다.
이번 동작은 #nav의 메뉴가 숨겨져 있고, 맨 처음 섹션이 내려가서  그 다음 섹션의 스크롤 탑이 화면
맨위에 오면 메뉴에 클래스 on 이 붙어서 보이게 되는 것이다. 물론 메뉴는 그 이후 고정되어서 보인다.
다만 다시 맨 위로 올라가면 메뉴가 사라진다.

2. #nav 아래에 h1과 div가 있다면, #nav > div 라고 경로를 작성하지 못한다. >는 바로 아래 자식태그
종류를 설정하기 때문에 h1 이 먼저 나오니까 성립되지 못한다. #nav div 라고 해야 한다.




<7. Scroll show/Hide menu>
1. 윈도우 높이값과 문서의 높이값은 다르다. 따라서 변수도 각각 다로 설정해줘야 한다.
윈도우는 현재 브라우저 상에서 보이는 높이다. 문서(Document)는 코딩된 섹션 전부의 높이다.
섹션이 5개면 5개 모두의 높이다.

2. outerHeight(); => 이거는 패딩,마진,보더값을 모두 포함한 높이를 알려준다. 그냥 Height는 순수 높이
만 알려준다.

3. 이번 애니메이션 동작은 다음과 같다. 윈도우가 스크롤이 움직이는지 감지해서 moveScroll 에 true
라고 준다. 그러면 setInterval을 통해서 0.25초 마다 트루를 감지하고 hasScroll(); 함수를 실행한다.
그리고 나서 moveScroll 은 다시  false가 된다.

4. 함수 작성 시, ${" "} 이렇게 안쓰도록 주의하자. 이렇게 쓰면 오류난다. $(" ") 이게 맞다.




<8. Dot Menu1>
1. 작동 방법은 기존에 메뉴대신에 섹션이 내려가면 측면에 도트에 불이 들어온다.




<9. Dot Menu2>
1. #dot li a 에서 li에 width 20px 주고, li a 에는 width 100% 주면, 나중에 크기 바꿀 때, li만
수정하면 li a 는 같이 따라서 바뀐다. 그러나 li a 에도 20픽셀 주면, 나중에 수정 할 때는
둘 다 고쳐야 된다. 그러니 편하게 가자.




<10. Dot menu3>
1. #dot li.active a:after 에 css로 transition: opacity 0.3s ease, transform 0.3s ease; 라고 주면, 섹션 이동 시 dot에
흰색 배경이 사라지는 모습이 생기고 그 다음에 다음 섹션 메뉴에 해당하는 Dot에 배경이 들어오는
효과가 발생한다. 이게 없으면 사라지는 효과는 발동 하지 않는다.




<11. Text Animation1>
1. 본격적인 패럴렉스 모형이다. 섹션을 내리면 글씨가 나타난다.

2. transform: skew(각도deg);  => 각도 기울기 만큼 기울어진 상태로 나타나는 애니메이션이다.

3. div에 show를 붙이기 전에는 애니메이션이 특정 위치에 나타나기만 하고, show가 붙으면,
섹션 중앙에 텍스트가 돌아오게 해서 우리 눈에는 섹션을 내리면 애니메이션이 동작해서 텍스트가
특정위티 에서 중앙으로 오는 것 같이 보이게 하면 된다.

4. 이러한 동작에는 스크립트가 섹션의 top 값과 오프셋 값이 만나서 같은 값이 되야지 애니메이션이
나오기 때문에 실제로는 해당 섹션의 윈도우 화면이 모두 나와야만 애니메이션이 동작하는 문제가
있다. 즉, 너무 느린 타이밍에 동작한다. 그래서 스크립트를 수정해 줘야 한다. 스크립트 top에 
-값을 주면 된다. 다만, 단순히 -값을 주면, 레티나 모니터, 모바일 등 화면 비율이 큰 기기에서는
정상 작동하지 않는 것 처럼 보인다. 따라서 top에 -$(window).height()/3  이라고 주면 된다.
이건 윈도우 화면의 높이의 1/3 을 top 값에서 빼고 계산 하라는 의미다. 이렇게 하면
윈도우 화면의 1/3 정도 왔을 때 애니메이션이 동작하게 된다.




<12. Text Animation2>
1. translate 속성을 잘 알고 있어야 한다. 이번에는 text가 나오되, 애니메이션이 추가되어서 나오는 방식이다.
애니메이션은 CSS 속성을 이용해 볼 것이다.

2. 인터넷 검색창에 animate css 라고 검색하면 사이트가 나온다. (daneden.github.io/animate.css/ )
여기서 cdn 으로 html에 링크 건 다음에 해당 사이트 에서 원하는 애니메이션 동작 이름을 쳐서 
찾아내고 그 소스 를 aniamtion 속성에 써주면 된다. 다양한 동작 들이 있으니 참고하면 된다.
예) #section h2 {opacity: 1, aniamtion: baunceInRight 1s}





